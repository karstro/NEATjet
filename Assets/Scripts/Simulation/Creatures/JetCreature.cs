using NeatJet.Scripts.Brain;
using NeatJet.Scripts.Simulation.Creatures.Genes;
using NeatJet.Scripts.Simulation.Creatures.Jets;
using NeatJet.Scripts.Simulation.Storage;

using UnityEngine;

namespace NeatJet.Scripts.Simulation.Creatures
{
    /// <summary>
    /// A component that represents a creature which can move itself around using <see cref="Jet"/>s. <br />
    /// The movements it makes are determined by an <see cref="IBrain"/>.
    /// </summary>
    public class JetCreature : MonoBehaviour
    {
        /// <summary>
        /// Mass is always 1f for now, as it only matters for thrust to weight, so increasing thrust has the same effect as lowering mass.
        /// </summary>
        private const float Mass = 1f;

        /// <summary>
        /// The radius of the creature's body.
        /// </summary>
        public float Radius { get; private set; }

        /// <summary>
        /// The number of jets the creature has.
        /// </summary>
        public int JetNumber { get; private set; }

        /// <summary>
        /// The current rotation of the creature's object.
        /// </summary>
        public Quaternion Rotation { get => Object.transform.localRotation; }

        /// <summary>
        /// The current position of the creature's object.
        /// </summary>
        public Vector3 Position { get => Object.transform.localPosition; }

        /// <summary>
        /// The creature's jets.
        /// </summary>
        public Jet[] Jets { get; private set; }

        /// <summary>
        /// The creature's brain.
        /// </summary>
        public IBrain Brain { get; private set; }

        /// <summary>
        /// The object under which the creature is constructed.
        /// </summary>
        public GameObject Object { get; private set; }

        /// <summary>
        /// The object which contains the creature's body.
        /// Can be null if there doesn't need to be a model.
        /// </summary>
        public GameObject BodyObject { get; private set; }

        /// <inheritdoc />
        public void Start()
        {
            Jets = GetComponents<Jet>();
            Brain = GetComponent<IBrain>();
        }

        /// <summary>
        /// Update the creature by the intent generated by it's brain.
        /// </summary>
        /// <param name="time">The current time since the start of the game. #TODO make it since the start of the simulation run.</param>
        /// <param name="deltaTime">The time that passed since the last update.</param>
        public void UpdateByIntent(float time, float deltaTime)
        {
            var (rotationIntents, thrustIntents) = Brain.GetIntent(time, this);

            for (var jetIndex = 0; jetIndex < JetNumber; jetIndex++)
            {
                Jets[jetIndex].UpdateByIntent(rotationIntents[jetIndex], thrustIntents[jetIndex], deltaTime);
            }
        }

        #region Builder

        /// <summary>
        /// The distance the creature starts off of the ground.
        /// </summary>
        private const float StartingHeight = 0.5f;

        /// <summary>
        /// Move the creature object to the correct starting location
        /// </summary>
        /// <param name="creatureObject"></param>
        /// <param name="gene"></param>
        private static void MoveCreatureObject(GameObject creatureObject, Gene gene)
        {
            var creatureHeight = gene.JetLength - gene.JetArm.y + gene.JetRadius + StartingHeight;
            var position = Vector3.up * creatureHeight;
            var rotation = Quaternion.identity;

            creatureObject.transform.SetLocalPositionAndRotation(position, rotation);
        }

        /// <summary>
        /// Initializes the creature's parameters.
        /// </summary>
        /// <param name="gene">The gene to take parameters from.</param>
        private void InitializeParameters(Gene gene)
        {
            Radius = gene.Radius;
            JetNumber = gene.Jets;
        }

        /// <summary>
        /// Initializes Unity components for teh creature.
        /// </summary>
        /// <param name="gameObject">The game object on which </param>
        private void InitializeComponents(GameObject gameObject)
        {
            Object = gameObject;
            ComponentAdder.AddSphereCollider(gameObject, Radius);
            ComponentAdder.AddRigidbody(gameObject, Mass);
        }

        /// <summary>
        /// Add a visible model for the creature.
        /// </summary>
        /// <param name="gameObject">The object to add the model to.</param>
        /// <param name="bodyMesh">The mesh to render.</param>
        /// <param name="bodyMaterial">The material to render the mesh with.</param>
        private void InitializeModel(GameObject gameObject, Mesh bodyMesh, Material bodyMaterial)
        {
            BodyObject = new("Body");
            BodyObject.transform.parent = gameObject.transform;
            BodyObject.transform.SetLocalPositionAndRotation(Vector3.zero, Quaternion.identity);
            BodyObject.transform.localScale = Radius * 2 * Vector3.one;
            ComponentAdder.AddMesh(gameObject, bodyMesh, bodyMaterial);
        }

        /// <summary>
        /// Add the components for a creature to the object.
        /// </summary>
        /// <param name="gameObject">The object to add the components to.</param>
        /// <param name="gene">The gene whose parameters to use.</param>
        /// <param name="makeModel">Whether or not to make a visible model for the creature's body.</param>
        /// <returns>The created creature component.</returns>
        public static JetCreature Add(GameObject gameObject, Gene gene, bool makeModel = true)
        {
            MoveCreatureObject(gameObject, gene);
            var creature = gameObject.AddComponent<JetCreature>();

            creature.InitializeParameters(gene);
            creature.InitializeComponents(gameObject);

            if (makeModel)
            {
                // #TODO add a better way of swapping the model
                var sphere = CreatureModelProvider.SphereMesh;
                var defaultMaterial = CreatureModelProvider.DefaultMaterial;
                creature.InitializeModel(gameObject, sphere, defaultMaterial);
            }

            return creature;
        }

        #endregion

        /// <summary>
        /// Destroy the Creature.
        /// </summary>
        public void Destroy()
        {
            foreach (var jet in Jets)
            {
                Destroy(jet);
            }

            Destroy(gameObject);
        }

        /// <summary>
        /// Make the creature match the given state.
        /// </summary>
        /// <param name="state">The state to match.</param>
        public void MatchState(State state)
        {
            Object.transform.SetLocalPositionAndRotation(state.Position, state.Rotation);

            for (var jetIndex = 0; jetIndex < JetNumber; jetIndex++)
            {
                Jets[jetIndex].MatchState(state.JetEnds[jetIndex]);
            }
        }
    }
}